#!/usr/bin/env python2.7
from custom_services.srv import updatePDGains
from custom_messages.msg import CustomCmnd
import rospy
from numpy import cos, sin
import numpy as np

class Reference:
	def __init__(self, service):
		self.service = service
		self.dx, self.dy, self.z_bs, self.z_max = 0.0,  0.00, 0.93, 1.02
		self.d, self.dt = 0.005, 0.005
		self.dx_cp = np.array([0.0,  0.0,  0.0, 0.0])
		self.dy_cp = np.array([0.0,  0.0,  0.0, 0.0])
		self.dz_cp = np.array([0.0,  0.0,  0.0, 0.0])   
    
		self.x_cp = np.array([0.47  ,  0.47  , -0.66  , -0.66  ])
		self.y_cp = np.array([0.225 , -0.225 ,  0.225 , -0.225 ])    
		self.z_cp = np.array([0.3035,  0.3035,  0.3035,  0.3035])  

		self.x_ref = np.array([[0.47, 0.47, -0.66, -0.66],
							   [0.35, 0.30, -0.55, -0.60 ],
							   [0.35, 0.25, -0.55, -0.65 ],
							   [0.45, 0.25, -0.55, -0.55],
							   [0.25, 0.45, -0.35, -0.43],
							   [0.285, 0.30, -0.185, -0.38]
							  ])
		
		self.y_ref = np.array([[0.225,  -0.225,  0.225, -0.225],
							   [0.25 ,  -0.25 ,  0.25 , -0.25 ],
							   [0.28,   -0.28 ,  0.25 , -0.25 ],
							   [0.28,   -0.33 ,  0.15 , -0.28 ],
							   [0.28,   -0.33 ,  0.15 , -0.30 ],
							   [0.32,   -0.12 ,  0.35 , -0.37 ],
							   [0.31,   -0.13 ,  0.365, -0.32 ] ])  
							   
		
		self.z_bs_ref = np.array([[self.z_bs], [self.z_max], [self.z_max+0.12], [self.z_max+0.05]])
		self.vel = np.full(13,self.d)
		    
		self.z_ref = np.array([[0.3035,  0.3035,  0.3035, 0.3035], 
							   [0.3035,  0.3035,  0.3035, 0.50],
							   [0.3035,  0.3035,  0.3035, 0.32],
							   [0.5,  0.3035,  0.3035, 0.3035]])  

		
#		self.pattern = [(self.move,[0,0,0,0]), (self.move,[0,1,0,0]), (self.move,[1,2,0,0]), 
#						(self.wait, [20])	 , (self.move,[1,2,0,1]), (self.move,[2,2,0,1]), 
#						(self.move,[2,3,0,1]), (self.claim, [3])	, (self.move,[2,3,1,1]),
#						(self.move,[3,4,1,2]), (self.move,[3,4,2,2]), (self.release, [3]),
#						(self.wait, [200]),	   (self.speed, [[0,2,4.0*self.dt], [1,2,0.5*self.dt]]) ,(self.move, [4,5,0,3]), 
#						(self.wait, [200]),    (self.speed, [[0,2,self.dt], [1,2,self.dt]]),
#						(self.move, [5,6,0,3]),(self.wait, [200])   ,  	(self.claim, [0]),
#						(self.move,[5,6,3,3]), (self.wait, [200])   ,	]
						
		self.pattern = [(self.move,[0,0,0,0]), (self.move,[0,1,0,0]), (self.move,[1,2,0,0]), ]			
		
		self.step = 0
		self.msg = CustomCmnd()
		self.endStep = len(self.pattern)+1
		self.timer = 0
		self.conds = {self.move: self.condMove, self.wait: self.condWait, self.claim: self.condPass, self.release: self.condPass, self.speed: self.condPass}
		self.condFunc = self.conds[self.getType()]

	def getBaseX(self):
		return self.dx
	def getBaseY(self):
		return self.dy
	def getBaseZ(self):
		return self.z_bs
	
	def claim(self):
		self.service(3, 1, self.get(0))	
		
	def release(self):
		self.service(3, 0, self.get(0))
				
	def get(self, i):
		return self.pattern[self.step][1][i]
	
	def getType(self):
		return self.pattern[self.step][0]
		
		
	def getX(self):
		return self.x_ref[self.get(0)]

	def getY(self):
		return self.y_ref[self.get(1)]
	
	def getZ(self):
		return self.z_ref[self.get(2)]
		
	def getHeight(self):
		return self.z_bs_ref[self.get(3)]
			
	def condition(self):
#			print(self.condFunc.__name__, np.allclose(self.getY() ,self.y_cp, 5e-03, 5e-03))

		return self.condFunc()
		
	def condPass(self):
		return True
	def condMove(self):
		#if self.timer%100 < 0.0001:
		#    print(self.condFunc.__name__, self.getZ(), self.z_ref)
		return np.allclose(self.getY() ,self.y_cp, 2e-03, 2e-03) and np.allclose(self.getX(),self.x_cp, 2e-03, 2e-03) and np.allclose(self.getZ(),self.z_cp, 2e-03, 2e-03) and np.allclose(self.getHeight(),self.z_bs, 2e-03, 2e-03)
		
	def condWait(self):
		return self.timer > self.get(0)
		
	def wait(self):
		self.timer += 1
		
	def speed(self):
		for i in self.pattern[self.step][1]:
			self.vel[i[0]*4+i[1]] = i[2]
		print("speed", self.vel)
			
		
	def increment(self):
		self.step += 1
		if not self.isRunning(): return
		self.timer = 0
		self.condFunc = self.conds[self.getType()]
		print(self.step, self.getType().__name__)

	def update(self):
		self.getType()()
		
	def move(self):
		self.dx_cp = self.vel[0:4]/self.dt*(self.getX() - self.x_cp)
		self.dy_cp = self.vel[4:8]/self.dt*(self.getY() - self.y_cp)
		self.dz_cp = self.vel[8:12]/self.dt*(self.getZ() - self.z_cp)
		self.dz_bs = self.vel[12]/self.dt*(self.getHeight() - self.z_bs)

		self.dx_cp[np.abs(self.dx_cp) < 1e-3] = 0		
		self.dy_cp[np.abs(self.dy_cp) < 1e-3] = 0		
		self.dz_cp[np.abs(self.dz_cp) < 1e-3] = 0		
		self.dz_bs[np.abs(self.dz_bs) < 1e-3] = 0		
		
		self.x_cp += self.dx_cp*self.dt
		self.y_cp += self.dy_cp*self.dt
		self.z_cp += self.dz_cp*self.dt
		self.z_bs += self.dz_bs*self.dt
		
		self.timer += 1
		#print("z_ref", self.getZ(), "z_", self.z_cp, "dz", self.dz_cp)
				
		
	def send(self):
		self.msg.velocity = list(sum(zip(self.dx_cp, self.dy_cp, self.dz_cp),())) + [2147483647]
		
		#if self.timer%100 < 0.0001:
		#	print(self.step, self.msg.velocity, self.dz_bs)
		
		return self.msg
		
	def end(self):
		self.msg.velocity = [0] * 12 + [2147483647]
		return self.msg
		
	def isRunning(self):
		return self.step < self.endStep
    		
if __name__ == '__main__':
    rospy.init_node('wheel_reference')
    rate = rospy.Rate(200)
    #print(1.0/dt)
    name = 'wheels_command'
        
    support = rospy.Publisher('wheels_support', CustomCmnd, queue_size=1)
   
    service_ok = False
    while (not rospy.is_shutdown() and not service_ok):
      try:
        print('wait for service: update_links')
        rospy.wait_for_service(name, 0.5)
        service_ok = True
        print('service found')
      except:
        pass

    rate.sleep()

    ref_service = rospy.ServiceProxy(name, updatePDGains)
    ref = Reference(ref_service)

    try:
        ref_service(1.0, 1.0, ref.getBaseX()*100.0)
        ref_service(2.0, 3.0, ref.getBaseZ()*100.0)
    except rospy.ServiceException as exc:
        print("Service did not process request: " + str(exc))         
        
    while not rospy.is_shutdown() and ref.isRunning():
	  
	  ref.update()
	  if ref.condition():
			ref.increment()
			
	  support.publish(ref.send())
	  ref_service(2.0, 3.0, ref.getBaseZ()*100.0)

	  rate.sleep()
     
    support.publish(ref.end())
 



