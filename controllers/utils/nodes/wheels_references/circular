#!/usr/bin/env python2.7
from custom_services.srv import updatePDGains
import rospy
from numpy import cos, sin, sqrt

if __name__ == '__main__':
    rospy.init_node('wheel_reference')
    dt = 0.005
    rate = rospy.Rate(1.0/dt)
    #print(1.0/dt)
    name = '/centauro/wheels_command'
    service_ok = False
    while (not rospy.is_shutdown() and not service_ok):
      try:
        print('wait for service: update_links')
        rospy.wait_for_service(name, 0.5)
        service_ok = True
        print('service found')
      except:
        pass

    rate.sleep()

    ref_service = rospy.ServiceProxy(name, updatePDGains)

    dth, r, th = -0.0, 2.0, 0.0
#    m_d, m_v, vel = 3.05, 2.75, 0.05
    m_d, m_v, vel, d_th = 3.05, 2.75, 1.00, 0.5
    x, y = 0, 0
    
    mode = 0


#    ref_service(1.0, 4.0, dth*100)

    dx, dy, dth =  vel,  0.00, 0.00

#    mode, dth = 1, -0.25
    while not rospy.is_shutdown():
#      # square
      if (mode == 0 and x > r):
        th, dth = 0, -d_th
        mode += 1
      elif (mode == 1 and th > -4.712):
        th += dth * dt * m_d
        dx = -r*cos(th)*dth
        dy = -r*sin(th)*dth
      elif (mode == 1 and th < -4.712):
        dx, dy, dth = 0.00,  vel, 0.00
        mode += 1
      elif (mode == 2 and y > r):
        dx, dy, dth = 0.00,  0.00, d_th
        mode += 1
      elif (mode == 3 and th < 0.0):
        th += dth * dt * m_d
        dx = r*cos(th)*dth
        dy = r*sin(th)*dth
      elif (mode == 3 and th > 0.0):
        dx, dy, dth = vel,  0.00, 0.0
        mode += 1
      elif (mode == 4 and x > 0.0):
        dx, dy, dth = 0.0,  0.00, 0.0
        mode += 1

#      dx = -r*cos(th)*dth*100.0
#      dy = -r*sin(th)*dth*100.0
      x += dx*dt*m_v
      y += dy*dt*m_v
      
      print("vel\t", sqrt(dx*dx+dy*dy), "th\t", th, "dth\t", dth)

      try:
        ref_service(1.0, 1.0, dx*100.0)
        ref_service(1.0, 2.0, dy*100.0)
        ref_service(1.0, 4.0, dth*100.0)

      except rospy.ServiceException as exc:
        print("Service did not process request: " + str(exc))


      rate.sleep()




